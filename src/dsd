#! /usr/bin/octave -q
# vim: syntax=octave

%% This file is part of DSD
%%
%% DSD
%% A GNU-Octave set of scripts for calculating
%% digital loudspeaker crossovers and room correction filters
%% Copyright (C) 2012-2019 Roberto Ripio
%%
%% DSD is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.
%%
%% DSD is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with DSD.  If not, see <https://www.gnu.org/licenses/>.



%%% prepare



% avoid checking timestamps of DSD m files for better performance
ignore_function_time_stamp ("all")

% say hello
disp("\n\
dsd\n\
Loudspeaker crossover and equalizer design\n\
Part of DSD (C) 2012-2019 Roberto Ripio\
\n");

% parse command line
p = inputParser;
% mandatory script filename as first parameter
p.addRequired("script", @ischar);
% optional fs as "fs <integer_number>"
p.addParameter("fs",0,@(x) mod(str2double(x),1) == 0)
% optional filter class as "class <lp|mp>"
p.addParameter("class","none",@(x) any (strcmp (x, {"none","lp", "mp"})));
% 'nopause' switch: do not show graphics on-screen
p.addSwitch("nopause");
try
    p.parse(argv(){:});
catch
    % lasterror()
    disp( "Error:");
    disp(["Incorrect command line parameters. " ...
             "Cannot continue: exiting...\n"]);
    return         
end_try_catch

% check for default config file and sources it
configDefaults=[mfilename("fullpath") ".ini"];
if exist(configDefaults, "file")
    source(configDefaults); % Reads default config
else
    disp( "Warning:");
    disp(["file \"" configDefaults "\" not found."]);
    disp( "Running without defaults.\n");
end

% check for design script file and sources it
filename = [p.Results.script ".xof"];
if exist(filename, "file")
    source(filename); % Reads project config
else
    disp("Error:");
    disp(["Script file \"" filename "\" not found. " ...
             "Cannot continue: exiting...\n"]);
    return
end

% check for fs as command line parameter
if p.Results.fs != 0
    GSFs=str2num(p.Results.fs);
end
strGSFs = num2str(GSFs);

% check for filter class as command line parameter
if ! strcmp(p.Results.class, "none")
    CFClass = p.Results.class;
end

% check for 'nopause' switch
if p.Results.nopause
    PSShow=false;
end

% Set file output folder and prefix
% directory path and filename suffix taken from script file
[FSOutDir , FSOutSuffix] = fileparts(filename);
if length(FSOutDir)==0
    FSOutDir = ".";
end
FSOutDir = [FSOutDir "/" strGSFs "/"];
mkdir(FSOutDir);

FSOutName = ["xo-" CFClass "-" FSOutSuffix];

% Some variable prefixes:
% MFR Model Frequency Response
% IFR Inverted model Frequency Response
% LS  LoudSpeaker frequency response as measured

% begin chronometer for calculation time asessment
t1=time;

% We make equal length speaker correction filters and crossover
% filters of final length 'm'. They will be trimmed and windowed
% to half the final length and later convolved and padded to get
% the composed filter of length 'm'.
%
% Real frequency vectors will then have 'm/2' length
% at any phase of calculations

% Final filter length and corresponding real F lenght
m=2^GSLExp;
mrf=m/2+1;
% Speaker EQ and XO length
m_ls=m/2;
% Calculation filter length and corresponding real F lenght
m_calc=2^GSLExpCalc;
mrf_calc=m_calc/2+1;

% frequency jump between bins
% (sampling frequency divided by filter length)
fl=GSFs/m;
fl_calc=GSFs/m_calc;
% max freq
fh_calc=mrf_calc-1*fl_calc;

% column vector of linearly spaced real frequencies
F      = (0:mrf-1)'*fl;
F_calc = (0:mrf_calc-1)'*fl_calc;


% LSdB, magnitude response from .frd file
[LSF_in, LSdB_in] = loadfrd (FSInputFile);
LSdB_pp = interp1(LSF_in, LSdB_in, 'pchip','pp');
LSdB = ppval(LSdB_pp, F);
LSdB_calc = ppval(LSdB_pp, F_calc);



%%% calculate



%% equalizer


% first working normalization

normfactor_dB_provis = - dsd_level_estimate (fl_calc,
                                             LSdB_calc,
                                             CFLowF,
                                             CFHighF,
                                             GSLevelInterval);

LSdB_calc += normfactor_dB_provis;

% shape target

% fix tails
MFRMag = dsd_fixtail (  F_calc,
                        LSdB_calc,
                        TFEndLow,
                        TFBeginLow,
                        TFIntervalLow,
                        TFSlopeLow,
                        TFEndHigh,
                        TFBeginHigh,
                        TFIntervalHigh,
                        TFSlopeHigh);

% limit equalization (horizontal)
MFRMag = dsd_fixtail (  F_calc,
                        mag2dB(MFRMag),
                        EQLEndLow,
                        EQLBeginLow,
                        EQLIntervalLow,
                        % slope allways zero here
                        0,
                        EQLEndHigh,
                        EQLBeginHigh,
                        EQLIntervalHigh,
                        % slope allways zero here
                        0);

% target inversion

% IFR Inverted target Frequency Response
IFRMag=1./MFRMag; % Response inversion

% Equalization impulse, before crossover and normalization
IFRImp=ifft(minphsp(wholespmp(IFRMag)));
% Trims to EQ length and windows EQ correction impulse
IFRImp=semiblackman(m_ls).*IFRImp(1:m_ls);


%% crossover


switch(CFClass)
    case "lp"
        % High pass with Butterworth magnitude. Useful for woofers
        if CFLowAsMP && strcmp (CFLowType{1}, "B") && (CFLowF(1) > 0)
            CFLowImp = crossButterworthLP(GSFs,m_ls/2,CFLowOrder(1)...
                                                    ,CFLowF(1),0,0);
            CFHighImp = crossLinear(GSFs,m_ls/2,CFLenghthCycles,0,CFHighF);
            % both already windowed
            CFImp=postpad(fftconv(CFLowImp,CFHighImp), m_ls);
        % Crossover filter
        elseif (CFHighF > 0 || CFLowF(1) > 0)
            CFImp = crossLinear(GSFs,m_ls,CFLenghthCycles,CFLowF(1),CFHighF);
        else
            CFImp=delta(m_ls);
        end
    case "mp"
        CFLowImp=delta(m_calc);
        % Highpass
        for i = 1:length(CFLowF)
            if CFLowF(i) > 0
                switch(CFLowType{i})
                    case "B"
                        CFLowImpTemp =  crossButterworth(
                            GSFs,m_calc,CFLowOrder(i),CFLowF(i),0,0);
                    case "LR"
                        CFLowImpTemp = crossLinkwitzRiley(
                            GSFs,m_calc,CFLowOrder(i),CFLowF(i),0,0);
                end
            else
                CFLowImpTemp=delta(m_calc);
            end
            CFLowImp=fftconv(CFLowImp,CFLowImpTemp);
        end
        % Lowpass
        if CFHighF > 0
            switch(CFHighType)
                case "B"
                    CFHighImp = crossButterworth(
                        GSFs,m_calc,0,0,CFHighOrder,CFHighF);
                case "LR"
                    CFHighImp = crossLinkwitzRiley(
                        GSFs,m_calc,0,0,CFHighOrder,CFHighF);
            end
        else
            CFHighImp=delta(m_calc);
        end
        CFImp=fftconv(CFLowImp,CFHighImp);
        % Trims and windows crossover filter
        CFImp=semiblackman(m_ls).*CFImp(1:m_ls);
end


%% final impulse


% convolves with loudspeaker correction

CFEqImp=postpad(fftconv(IFRImp,CFImp),m);

% normalize

% XO magnitude
CFEqMag=abs(semisp(fft(CFEqImp)));

% normalize again, against possible low frequency amplification
normfactor=max(CFEqMag);
normfactor_dB = mag2dB(normfactor);
normfactor_dB_total = normfactor_dB_provis + normfactor_dB;

% apply normalization
CFEqMag/=normfactor;
CFEqImp/=normfactor;



%%% output



%% filter pcm


% raw format
if FSOutPcmFilter
    savepcm(CFEqImp, [FSOutDir FSOutName FSOutPcmExt]);
end

% wav format
if FSOutWavFilter
    audiowrite([FSOutDir FSOutName ".wav"],
            CFEqImp, GSFs, 'BitsPerSample', FSOutWavDepth);
end


%% Some information on screen


FSOutName
GSFs
GSLExp
m
normfactor_dB_total
t2=time;
disp (["\nCalculated in ", num2str(t2-t1), " s\n"]);


%% plot


% prepare informative responses for graphics,

% loudspeaker as measured
LSdB+=normfactor_dB_total;
% model response is interpolated  over F, downsampled
MFRdB=interp1(F_calc,mag2dB(MFRMag)+normfactor_dB,F,'pchip');
% Xo+Eq filter
CFEqdB=mag2dB(CFEqMag);
% result (model * filter)
OUTdB=CFEqdB+MFRdB;

% draw

figure(1,'visible','off');
hold on;

% plots original response
semilogx(
    F(2:end),LSdB(2:end),strcat("1",";",'Original',";"));
% plots target response
semilogx(
    F(2:end),MFRdB(2:end),strcat("2",";",'Model',";"));
% plots CF response
semilogx(
    F(2:end),CFEqdB(2:end),strcat("4",";",'Filter',";"));
% plots final response
semilogx(
    F(2:end),OUTdB(2:end),strcat("3",";",'Result',";"));

legend("boxoff")
legend("location", "north", "orientation", "horizontal");

% define plot axis
audioaxe(PSVTop,PSVRange,PSVStep,PSFLow,PSFHigh,FSOutName);


%% log


% save normalization factor
normfile = [FSOutDir FSNormFile];
fid=fopen(normfile, "a+t");
fputs(fid, [FSOutName, "\t\t", sprintf('% 7.2f', normfactor_dB), "\n\n"]);
fclose(fid);

% saves plot image
disp("Saving plot...\n");

if PSOutRaster
    print ([FSOutDir, FSOutName, ".", PSOutRasterExt]);
end
if PSOutVector
    print ([FSOutDir, FSOutName, ".", PSOutVectorExt]);
end

% scale the graphic and pause to examine it
if PSShow
    figure(1,'units','normalized','position',[PSPos,PSSize])
    disp ("Press any key...\n");
    pause()
end

hold off;


%% finis coronat opus
